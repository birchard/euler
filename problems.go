package euler

import "math"


// Problem 3
// Largest prime factor
// The prime factors of 13195 are 5, 7, 13 and 29.
//
// What is the largest prime factor of the number 600851475143 ?
//
func Problem003(n int) int {

	factor := 1
	primes := sieveOfEratosthenes(int(math.Sqrt(float64(n))))

	for _,x := range primes {
		if n % x == 0 {
			factor = x
		}
	}

	return factor
}

func sieveOfEratosthenes(N int) ([]int) {
    // sieve
    c := make([]bool, N) // c for composite.  false means prime candidate
    c[1] = true              // 1 not considered prime
    p := 2
    for {
        // first allowed optimization:  outer loop only goes to sqrt(limit)
        p2 := p * p
        if p2 >= N {
            break
        }
        // second allowed optimization:  inner loop starts at sqr(p)
        for i := p2; i < N; i += p {
            c[i] = true // it's a composite
 
        }
        // scan to get next prime for outer loop
        for {
            p++
            if !c[p] {
                break
            }
        }
    }
 
    // sieve complete.  now save off primes.
    v := make([]int,0)
    for n := 1; n < N; n++ {
        if c[n] == false {
            v = append(v, n)
        }
    }
    
	return v
}

// Problem 2
// Even Fibonacci numbers
// Each new term in the Fibonacci sequence is generated by adding the
// previous two terms. By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values
// do not exceed four million, find the sum of the even-valued terms.
//
func Problem002() int {

	x, y := 1, 1
	sum := 0

	for sum <= 4000000 {
		sum += x + y
		x, y = nextPair(x, y)
	}
	return sum
}

func nextPair(x, y int) (int, int) {
	return x + 2*y, 2*x + 3*y
}

// Problem 1
// If we list all the natural numbers below 10 that are multiples of 3 or 5,
// we get 3, 5, 6 and 9. The sum of these multiples is 23.
//
// Find the sum of all the multiples of 3 or 5 below 1000.
//
func Problem001(count int) int {

	count -= 1

	return sumDivisibleBy(count, 3) + sumDivisibleBy(count, 5) - sumDivisibleBy(count, 15)
}

func sumDivisibleBy(count, n int) int {
	p := count / n
	return n * (p * (p + 1)) / 2
}
